local mt = getrawmetatable(game)
setreadonly(mt, false)

local oldNamecall = mt.__namecall
mt.__namecall = newcclosure(function(self, ...)
	local method = getnamecallmethod()
	if method == "Kick" or method == "kick" then
		return warn("‚ö†Ô∏è Kick attempt blocked.")
	elseif tostring(self):lower():find("ban") then
		return warn("‚ö†Ô∏è Ban attempt blocked.")
	end
	return oldNamecall(self, ...)
end)

-- üì¶ Dump logic in Decompiler Tab
local function dumpScriptsAndSave()
	local HttpService = game:GetService("HttpService")
	local MarketplaceService = game:GetService("MarketplaceService")

	-- Generate filename
	local function genFile(base, ext)
		local ok, info = pcall(function()
			return MarketplaceService:GetProductInfo(game.PlaceId)
		end)
		local name = (ok and info.Name or "UnknownGame"):gsub("%W","_")
		local id = tostring(game.GameId):sub(1,8)
		local f = string.format("%s_%s_%s.%s", base, name, id, ext)
		local i, try = 1, f
		while isfile and isfile(try) do
			try = string.format("%s_%d.%s", f:sub(1,#f-#ext-1), i, ext)
			i += 1
		end
		return try
	end

	-- Dump all scripts
	local scripts = {}
	for _, obj in ipairs(game:GetDescendants()) do
		if obj:IsA("LocalScript") or obj:IsA("ModuleScript") then
			pcall(function()
				scripts[obj:GetFullName()] = obj.Source
			end)
		end
	end
	writefile(genFile("ClientScripts", "json"), HttpService:JSONEncode(scripts))

	-- Save full game instance
	local ok, result = pcall(function()
		saveinstance(genFile("FullGame", "rbxlx"))
	end)
	
	if ok then
		warn("‚úÖ Decompile & Save complete!")
	else
		warn("‚ùå saveinstance() failed")
	end
end

-- üß† Hook Decompiler tab to actual function
local decompilerBtn = buttons["Decompiler"]
if decompilerBtn then
	decompilerBtn.MouseButton1Click:Connect(function()
		task.wait(0.5)
		dumpScriptsAndSave()
	end)
end
